service:
  name: StackJanitor

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-step-functions
  - serverless-pseudo-parameters

custom:
  DYNAMO_DB_TABLE: stackJanitorTable

provider:
  name: aws
  runtime: nodejs10.x
  region: ap-southeast-2
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "cloudformation:DescribeStack*"
        - "dynamodb:DescribeTable"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource: "*"

resources:
  Resources:
    stackJanitorTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.DYNAMO_DB_TABLE}
        AttributeDefinitions:
          - AttributeName: stackName
            AttributeType: S
          - AttributeName: expirationTime
            AttributeType: N

        KeySchema:
          - AttributeName: stackName
            KeyType: HASH
          - AttributeName: expirationTime
            KeyType: RANGE

        TimeToLiveSpecification:
          AttributeName: expirationTime
          Enabled: true

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

        StreamSpecification:
          StreamViewType: NEW_IMAGE

functions:
  logCloudFormationStack:
    handler: src/logCloudFormationStack.index

  monitorCloudFormationStack:
    handler: src/monitorCloudFormationStack.index

  deleteCloudFormationStack:
    handler: src/deleteCloudFormationStack.index
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [stackJanitorTable, StreamArn]

stepFunctions:
  stateMachines:
    StackJanitor:
      name: StackJanitorStateMachine
      definition:
        Comment: "StackJanitor State Machine"
        StartAt: logCloudFormationStack
        States:
          logCloudFormationStack:
            Type: Task
            Next: checkStackJanitorTag
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-logCloudFormationStack
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: EndStackMonitoring

          checkStackJanitorTag:
            Type: Choice
            Choices:
              - Variable: $.results.stackjanitor
                StringEquals: enabled
                Next: MonitorStack
            Default: EndStackMonitoring

          EndStackMonitoring:
            Type: Pass
            End: true

          MonitorStack:
            Type: Task
            Next: EndStackMonitoring
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-monitorCloudFormationStack
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: EndStackMonitoring

      events:
        - cloudwatchEvent:
            event:
              source:
                - "aws.cloudformation"
              detail:
                eventSource:
                  - "cloudformation.amazonaws.com"
                eventName:
                  - "CreateStack"
                  - "UpdateStack"
                  - "DeleteStack"
