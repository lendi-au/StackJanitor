service:
  name: StackJanitor

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-step-functions
  - serverless-pseudo-parameters

custom:
  DYNAMO_DB_TABLE: stackJanitorTable
  DEFAULT_EXPIRATION_PERIOD: 604800 #seconds
  DEFAULT_REGION: "ap-southeast-2"

provider:
  name: aws
  runtime: nodejs10.x
  memorySize: 128
  stage: ${opt:stage, 'development'}
  region: ${self:custom.DEFAULT_REGION}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:DescribeTable"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource: "arn:aws:dynamodb:*:*:table/${self:custom.DYNAMO_DB_TABLE}"
    - Effect: "Allow"
      Action:
        - "cloudformation:DescribeStack*"
        - "cloudformation:DeleteStack*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "ec2:*"
        - "s3:*"
        - "ecs:*"
        - "elasticloadbalancing:*"
        - "elasticloadbalancing:*"
        - "elasticloadbalancingv2:*"
        - "logs:*"
        - "events:*"
        - "route53:*"
        - "cloudwatch:*"
        - "application-autoscaling:*"
        - "autoscaling:*"
        - "apigateway:*"
      Resource: "*"

resources:
  Resources:
    stackJanitorTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.DYNAMO_DB_TABLE}
        AttributeDefinitions:
          - AttributeName: stackName
            AttributeType: S
          - AttributeName: stackId
            AttributeType: S

        KeySchema:
          - AttributeName: stackName
            KeyType: HASH
          - AttributeName: stackId
            KeyType: RANGE

        TimeToLiveSpecification:
          AttributeName: expirationTime
          Enabled: true

        BillingMode: PAY_PER_REQUEST

        StreamSpecification:
          StreamViewType: NEW_IMAGE

functions:
  logCloudFormationStack:
    handler: src/handlers/logCloudFormationStack.index

  monitorCloudFormationStack:
    handler: src/handlers/monitorCloudFormationStack.index
    environment:
      DEFAULT_DYNAMODB_TABLE: ${self:custom.DYNAMO_DB_TABLE}
      DEFAULT_EXPIRATION_PERIOD: ${self:custom.DEFAULT_EXPIRATION_PERIOD}
      DEFAULT_REGION: ${self:custom.DEFAULT_REGION}

  gitHook:
    handler: src/handlers/gitHook.index
    events:
      - http:
          path: /deleteStack
          method: post

  deleteCloudFormationStack:
    handler: src/handlers/deleteCloudFormationStack.index
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [stackJanitorTable, StreamArn]

stepFunctions:
  stateMachines:
    StackJanitor:
      name: StackJanitorStateMachine
      definition:
        Comment: "StackJanitor State Machine"
        StartAt: logCloudFormationStack
        States:
          logCloudFormationStack:
            Type: Task
            Next: checkStackJanitorTag
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-logCloudFormationStack
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: EndStackMonitoring

          checkStackJanitorTag:
            Type: Choice
            Choices:
              - Variable: $.results.stackjanitor
                StringEquals: enabled
                Next: MonitorStack
            Default: EndStackMonitoring

          EndStackMonitoring:
            Type: Pass
            End: true

          MonitorStack:
            Type: Task
            Next: EndStackMonitoring
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-monitorCloudFormationStack
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: EndStackMonitoring

      events:
        - cloudwatchEvent:
            event:
              source:
                - "aws.cloudformation"
              detail:
                eventSource:
                  - "cloudformation.amazonaws.com"
                eventName:
                  - "CreateStack"
                  - "UpdateStack"
                  - "DeleteStack"
